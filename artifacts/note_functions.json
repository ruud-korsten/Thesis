{
  "`Patient_ID` and `Hospital_ID` should be unique within their respective contexts to ensure distinct identification of patients and hospitals.": "def check_unique_patient_and_hospital_ids(df):\n    patient_violations = df['Patient_ID'].duplicated()\n    hospital_violations = df['Hospital_ID'].duplicated()\n    return patient_violations | hospital_violations",
  "Diagnoses and symptoms should logically correlate, meaning symptoms listed should be relevant to the diagnoses given.": "def check_diagnosis_symptoms_correlation(df):\n    invalid_diagnosis_symptoms_pairs = {\n        'Migraine': ['Chest Pain', 'Abdominal Pain'],\n        'Asthma': ['Joint Pain', 'Skin Rash'],\n        'Diabetes': ['Cough', 'Sneezing']\n    }\n    return df.apply(\n        lambda row: any(\n            symptom in invalid_diagnosis_symptoms_pairs.get(row['Diagnosis'], [])\n            for symptom in row['Symptoms'].split(',')\n        ),\n        axis=1\n    )",
  "Medications should correspond to the diagnoses and symptoms, following standard medical practices.": "def check_medications_correspondence(df):\n    return ~((df['Diagnosis'].notna() & df['Medications'].notna()) | (df['Symptoms'].notna() & df['Medications'].notna()))",
  "Temporal logic should be applied to dates and sequences, ensuring logical chronological order in related datasets like `Encounter_Visits`.": "def check_temporal_violation_encounter_visits(df):\n    return df.duplicated(subset=['Patient_ID', 'Hospital_ID'], keep='first') | df.duplicated(subset=['Patient_ID', 'Hospital_ID'], keep='last')",
  "The dataset is used to evaluate hospital performance, patient outcomes, and treatment efficacy, thus requiring high data quality and accuracy.": "def check_missing_critical_values(df):\n    return df[['Patient_ID', 'Hospital_ID', 'Diagnosis']].isnull().any(axis=1)",
  "Lab results should be interpreted within the context of specified reference ranges, and flags (e.g., \"Normal\", \"Abnormal\") should be used to highlight significant deviations.": "def check_lab_results_for_flags(df):\n    return df['Lab_Results'].isna() | ~df['Lab_Results'].str.contains('Normal|Abnormal')",
  "Critical fields like Diagnosis, Symptoms, Medications, and Lab Results should not be null.": "def check_critical_fields_not_null(df):\n    return df[['Diagnosis', 'Symptoms', 'Medications', 'Lab_Results']].isnull().any(axis=1)"
}